{"version":3,"sources":["components/nav/Header.js","components/nav/Footer.js","components/PreviewItem.js","components/Landing.js","App.js","serviceWorker.js","index.js"],"names":["useState","React","Header","sidebar","setSidebarState","visible","toggleSidebar","e","Navbar","id","className","style","display","variant","Nav","width","Col","Brand","textAlign","src","onClick","Item","padding","Button","backgroundColor","borderColor","marginLeft","color","fontFamily","fontWeight","fontSize","opacity","Footer","bg","fixed","justifyContent","PreviewItem","props","isShown","setIsShown","border","img","path","preview","rounded","toggleVal","window","innerWidth","marginTop","rel","target","href","Fade","in","borderRadius","onMouseEnter","onMouseLeave","previewsOne","previewsTwo","Landing","Container","Row","md","span","map","offset","App","exact","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2aea49ec.chunk.js","sourcesContent":["import React from 'react'\nimport '../../App.css'\n// import Sidebar from './Sidebar'\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col'\nimport Nav from 'react-bootstrap/Nav'\nimport Navbar from 'react-bootstrap/Navbar'\n\nconst { useState } = React;\n\nfunction Header() {\n    const [sidebar, setSidebarState] = useState(false)\n    const visible = sidebar ? 'show' : 'hide'\n\n    const toggleSidebar = (e) => {\n        const toggle = sidebar ? false : true;\n        setSidebarState(toggle);\n    }\n\n    return (\n        <>\n            <Navbar id=\"sidebar\" className={`${visible} header`} style={{ display: \"inline-table\" }} variant=\"light\">\n                <Nav style={{ width: '20em' }}>\n                    <Col>\n                        <Navbar.Brand style={{ textAlign: 'center' }}>\n                            <img\n                                src=\"/chrispic.png\"\n                                width=\"50%\"\n                                onClick={toggleSidebar}\n                            />\n                        </Navbar.Brand>\n                        <Nav.Item>\n                            <div className=\"font\">\n                                <b>About</b>\n                                <br />\n                                <br />\n                                <span>\n                                    Full-Stack Software Engineer looking to implement and further my knowledge\n                                    in Web Development with a focus on delivering complex infrastructure\n                                    into a seamless experience for end-users.\n                                </span>\n                            </div>\n                        </Nav.Item>\n                    </Col>\n                </Nav>\n            </Navbar>\n\n            <Navbar variant=\"light\" className=\"header\" style={{ padding: `${sidebar ? '0' : ''}` }}>\n                <Navbar.Brand>\n                    { sidebar ? (\n                        <Button style={{ backgroundColor: 'hsl(0, 0%, 98%)', borderColor: 'hsl(0, 0%, 98%)', padding: '0', marginLeft: '1em' }} onClick={toggleSidebar}>\n                            <div style={{ color: 'black', fontFamily: 'Montserrat', fontWeight: '500', fontSize: '2em' }}>x</div>\n                        </Button>\n                    ) : (\n                        <img\n                        src=\"/portfolio/sandwich.png\"\n                        id=\"sandwich\"\n                        style= {{ opacity: `${sidebar ? '0' : ''}` }}\n                        onClick={toggleSidebar}\n                        />\n                    )}\n                </Navbar.Brand>\n            </Navbar>\n        </>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport '../../App.css';\nimport Col from 'react-bootstrap/Col'\nimport Nav from 'react-bootstrap/Nav'\nimport Navbar from 'react-bootstrap/Navbar'\n\nfunction Footer() {\n  return (\n    <div className=\"footer-text\">\n      <Navbar bg=\"secondary\" variant=\"light\" fixed=\"bottom\" style={{ justifyContent: \"center\" }}>\n          <Nav>\n            <Nav.Item className=\"font\" id=\"footer\" style={{ textAlign: \"center\" }}>\n              @ Christian Tavares 2020\n            </Nav.Item>\n          </Nav>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default Footer;","import React from 'react'\nimport '../App.css'\nimport Col from 'react-bootstrap/Col'\nimport Fade from 'react-bootstrap/Fade'\n\nconst { useState } = React;\n\nfunction PreviewItem(props) {\n    const [isShown, setIsShown] = useState(false)\n    const { border, img, path, preview, rounded, width } = props;\n\n    const toggleVal = isShown ? false : true\n    const opacity = isShown ? '.1' : '1';\n\n    if (window.innerWidth < 500) {\n        return (\n            <Col>\n                { isShown ? (\n                <div style={{ marginTop: '3em', textAlign: 'center' }}>\n                    <a\n                        rel=\"noopener noreferrer\"\n                        target=\"_blank\"\n                        href={path}\n                        className=\"img-wrapper\"\n                        onClick={() => setIsShown(toggleVal)}\n                    >\n                        <Fade in={isShown}>\n                            <span className=\"preview-text font\">\n                                {preview}\n                            </span>\n                        </Fade>\n                        <span style={{ color: 'black' }}>\n                            <img\n                                className={`${rounded ? \"rounded-circle\" : \"\"} img`}\n                                src={img}\n                                style={{ opacity: opacity, borderRadius: border }}\n                            >\n                            </img>\n                        </span>\n                    </a>\n                </div>\n                ) : (\n                <div style={{ marginTop: '3em', textAlign: 'center' }}>\n                    <div\n                        className=\"img-wrapper\"\n                        onClick={() => setIsShown(toggleVal)}\n                    >\n                        <Fade in={isShown}>\n                            { isShown ? (\n                                <a\n                                    rel=\"noopener noreferrer\"\n                                    target=\"_blank\"\n                                    href={path}\n                                >\n                                    <span className=\"preview-text font\">\n                                        {preview}\n                                    </span>\n                                </a>\n                                ) : (\n                                <span className=\"preview-text font\">\n                                    {preview}\n                                </span>\n                            )}\n                        </Fade>\n                        <span style={{ color: 'black' }}>\n                            <img\n                                className={`${rounded ? \"rounded-circle\" : \"\"} img`}\n                                src={img}\n                                style={{ opacity: opacity, borderRadius: border }}\n                            >\n                            </img>\n                        </span>\n                    </div>\n                </div>\n            )}\n            </Col>\n        )\n    } \n\n    return (\n        <Col>\n            <div style={{ marginTop: '3em', textAlign: 'center' }}>\n                <a\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                    href={path}\n                    className=\"img-wrapper\"\n                    onMouseEnter={() => setIsShown(toggleVal)}\n                    onMouseLeave={() => setIsShown(toggleVal)}\n                >\n                    <Fade in={isShown}>\n                        <span className=\"preview-text font\">\n                            {preview}\n                        </span>\n                    </Fade>\n                    <span style={{ color: 'black' }}>\n                        <img\n                            className={`${rounded ? \"rounded-circle\" : \"\"} img`}\n                            src={img}\n                            style={{ opacity: opacity, borderRadius: border }}\n                        >\n                        </img>\n                    </span>\n                </a>\n            </div>\n        </Col>\n    )\n}\n\nexport default PreviewItem;\n","import React from 'react'\nimport '../App.css'\nimport PreviewItem from './PreviewItem'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\n\nconst previewsOne = [\n    { preview: \"Credibility Capital\", path: \"http://www.credibilitycapital.com\", img: \"/portfolio/credcap-icon.png\", border: '50%', rounded: true },\n    { preview: \"Project Innovate Newark\", path: \"http://www.projectinnovatenewark.org\", img: \"/portfolio/pin-copy.png\", border: '50%', rounded: false },\n    { preview: \"The Todo App\", path: \"https://github.com/Christiantav/todo-app\", img: \"/portfolio/todo.png\", border: '50%', rounded: true },\n]\n\nconst previewsTwo = [\n    { preview: \"Blogger\", path: \"https://github.com/Christiantav/blogger\", img: \"/portfolio/blogger.png\", border: '50%', rounded: true },\n    { preview: \"Computer Science Program Teacher\", path: \"https://github.com/projectinnovatenewark/csx\", img: \"/portfolio/csx.png\", border: '50%', rounded: false },\n]\n\nfunction Landing() {\n    return (\n        <>\n            <Container>\n                <div className=\"font\" id=\"title\">\n                    Software Development Portfolio of Christian Tavares\n                </div>\n\n                <Row md={{ span: 3 }}>\n                    {previewsOne.map(preview =>\n                        <PreviewItem {...preview} />\n                    )}\n                </Row>\n\n                <Row md={{ span: 3, offset: 3 }}>\n                    {previewsTwo.map(preview =>\n                        <PreviewItem {...preview} />\n                    )}\n                </Row>\n            </Container>\n        </>\n    );\n}\n\nexport default Landing;\n","import React from 'react'\nimport './App.css'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport Header from './components/nav/Header'\nimport Footer from './components/nav/Footer'\nimport Landing from './components/Landing'\n\nfunction App() {\n  return (\n    <>\n      <Header />\n        <Router>\n          <Switch>\n            <Route exact path=\"/\">\n              <Landing/>\n            </Route>\n          </Switch>\n        </Router>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}